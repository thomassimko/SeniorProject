service: onsight


provider:
  name: aws
  runtime: nodejs6.10
  region: us-west-2

  # 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:us-west-2:*:*"

functions:
  create:
    handler: src/competition/createComp.handler
    events:
      - http:
          path: competitions
          method: post
          cors: true
          authorizer: aws_iam

  list:
    handler: src/competition/getComps.handler
    events:
      - http:
          path: competitions
          method: get
          cors: true
          authorizer: aws_iam

  getComp:
    handler: src/competition/getComp.handler
    events:
      - http:
          path: competitions/{competitionId}
          method: get
          cors: true
          authorizer: aws_iam

  updateComp:
    handler: src/competition/updateComp.handler
    events:
      - http:
          path: competitions/{competitionId}
          method: put
          cors: true
          authorizer: aws_iam

  register:
    handler: src/register/registerCompetitor.handler
    events:
      - http:
          path: competitions/{competitionId}/register
          method: post
          cors: true
          authorizer: aws_iam

  registerList:
      handler: src/register/getRegisteredCompetitors.handler
      events:
        - http:
            path: competitions/{competitionId}/register
            method: get
            cors: true
            authorizer: aws_iam

  updateCompetitor:
        handler: src/register/updateCompetitor.handler
        events:
          - http:
              path: competitions/{competitionId}/register/{competitorId}
              method: put
              cors: true
              authorizer: aws_iam

  getRoutes:
        handler: src/routes/getRoutes.handler
        events:
          - http:
              path: competitions/{competitionId}/routes
              method: get
              cors: true
              authorizer: aws_iam

  createRoutes:
        handler: src/routes/createRoutes.handler
        events:
          - http:
              path: competitions/{competitionId}/routes
              method: put
              cors: true
              authorizer: aws_iam

plugins:
  - serverless-plugin-typescript
  - serverless-offline

package:
  exclude:
    - node_modules/**/*
  include:
    - src/*